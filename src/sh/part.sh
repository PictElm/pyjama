eval $(printf 'h=;all=_no_cmp_add_sub_mul_div_mod_pow_sum_prd_max_min_v_s_l_span_copy_pick_stow_find_size_hold_drop_does_;pIFS=$IFS;w(){ z=;if [ %s$1%s = %s${1#@}%s ];then x=;for y in $*;do if [ -n %s$x%s ]&&[ %s$x%s = %s${x%%,}%s ];then x=$x/$y;else x=$x$y;fi;done;IFS=,;for y in $x;do [ -z %s${all##*_${y%%_*}_*}%s ]&&eval y=$(IFS=/;y=$(echo $y);IFS=$pIFS;$y);z=$z${z:+ }$y;IFS=,;done;IFS=$pIFS;else z=${1#@};fi;echo $z;};split(){ IFS=:;echo $1;IFS=$pIFS;};zap(){ r=;k=0;for v in $(split $2);do u=$(eval echo %s$%s$((k+3)));r=$r${r:+:}$(eval echo %s$1%s);k=$((k+1));done;echo ${r:-:};};powu(){ if [ 1 -eq $2 ];then echo $1;elif [ 0 -eq $2 ];then echo 1;else c=$(($2 / 2));d=$(powu $1 $c);s=$((d * d));[ 1 -eq $(($2 %% 2)) ]&&s=$((s * $1));echo $s;fi;};setat(){ n=$1;m=$2;shift 2;i=$@;shift $n;o=${i%%$@};shift;echo $o$m $@;};no_(){ zap %s$((!v))%s $1;};cmp_(){ zap %s$((v < u ? -1 : v > u))%s $1 $(split $2);};add_(){ zap %s$((v + u))%s $1 $(split $2);};sub_(){ zap %s$((v - u))%s $1 $(split $2);};mul_(){ zap %s$((v * u))%s $1 $(split $2);};div_(){ zap %s$((v / u))%s $1 $(split $2);};mod_(){ zap %s$(((v %% u + u) %% u))%s $1 $(split $2);};pow_(){ zap %s$(powu $v $u)%s $1 $(split $2);};sum_(){ r=0;for v in $(split $1);do r=$((r + v));done;echo $r;};prd_(){ r=1;for v in $(split $1);do r=$((r * v));done;echo $r;};max_(){ r=-2147483648;for v in $(split $1);do [ $r -lt $v ]&&r=$v;done;echo $r;};min_(){ r=2147483647;for v in $(split $1);do [ $r -gt $v ]&&r=$v;done;echo $r;};v_(){ r=;for t in $*;do r=$r${r:+:}$t;done;echo ${r:-:};};s_(){ s=%s$*%s;r=;while [ -n %s$s%s ];do c=$(printf %%c %s$s%s);s=${s#$c};r=$r${r:+:}$(printf %%d %s%s$c%s);done;echo ${r:-:};};l_(){ echo ${1##*:};};span_(){ r=;k=$1;d=-lt;[ $3 -lt 0 ]&&d=-gt;while [ $k $d $2 ];do r=$r${r:+:}$k;k=$((k+$3));done;echo ${r:-:};};copy_(){ r=;if [ -n %s$2%s ];then c=$2;while [ 0 -ne $c ];do c=$((c-1));r=$r${r:+:}${1#:};done;fi;echo ${r:-:};};pick_(){ r=;if [ -n %s$2%s ];then set -- $2 $(split $1);for k in $(split $1);do eval r=$r${r:+:}%s$%s$((k+2));done;fi;echo ${r:-:};};stow_(){ r=$(split $1);set -- $2 $(split $3);for k in $(split $1);do shift;r=$(setat $k $1 $r);done;v_ $r;};find_(){ r=;if [ -n %s$2%s ];then k=0;for e in $(split $1);do [ $e -eq $2 ]&&r=$r${r:+:}$k;k=$((k+1));done;fi;echo ${r:-:};};size_(){ set -- $(split $1);echo $#;};hold_(){ echo %s$1;h=$h${h:+:}${1#:}%s;};drop_(){ o=$1;c=$2;set -- $(split $h);i=$@;shift $(($#-$o-$c));m=$@;shift $(($c));echo %s$(v_ ${m%%$@});h=$(v_ ${i%%$m} $@)%s;};does_(){ eval echo %s$%s$#;};skip=1;text=;s=%s $(w %s;while read -r line;do IFS=$pIFS;if [ -n %s$skip%s ];then [ %sprogram_(%s = %s$line%s ]&&skip=;else [ %svoila_()%s = %s$line%s ]&&break;togg=;IFS=%s%s%s;for chunk in $line;do if [ -z %s$togg%s ];then if [ %s(%s = %s$chunk%s ];then added=$s;else added=;IFS=%s(%s;for part in $chunk;do added=$added${added:+$s}$part;done;[ %s$chunk%s = %s${chunk#(}%s ]||added=$s$added;[ %s$chunk%s = %s${chunk%%(}%s ]||added=$added$s;fi;text=$text$added;togg=1;else text=%s$text%s@$chunk%s%s;togg=;fi;done;IFS=$pIFS;fi;done < %s$0%s;eval echo %s$(w %s$text%s)%s' $w $w $w $w $w $w $w $w $w $w $w $w $w $w $w $w $q $q $q $q $q $q $q $q $q $q $q $q $q $q $q $q $w $w $w $w $w $w $w $q $w $w $w $w $w $q $q $w $w $w $w $w $w $q $q $q $q $w $w $w $w $w $w $w $w $w $w $q $w $q $w $w $w $w $w $w $w $w $w $w $w $w $w $w $w $w $w $q $q $w $w $w $q $q $q $q)